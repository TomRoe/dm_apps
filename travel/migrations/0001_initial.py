# Generated by Django 2.2.2 on 2019-10-17 14:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('shared_models', '0025_region_head'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Purpose',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='name (eng)')),
                ('nom', models.CharField(blank=True, max_length=100, null=True, verbose_name='name (fre)')),
                ('description_eng', models.CharField(blank=True, max_length=1000, null=True, verbose_name='description (eng)')),
                ('description_fre', models.CharField(blank=True, max_length=1000, null=True, verbose_name='description (fre)')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Reason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='name (eng)')),
                ('nom', models.CharField(blank=True, max_length=100, null=True, verbose_name='name (fre)')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RegisteredEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
                ('number', models.IntegerField(blank=True, null=True, verbose_name='event number')),
                ('start_date', models.DateTimeField(verbose_name='start date of event')),
                ('end_date', models.DateTimeField(verbose_name='end date of event')),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='name (eng)')),
                ('nom', models.CharField(blank=True, max_length=100, null=True, verbose_name='name (fre)')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('used_for', models.IntegerField(choices=[(1, 'Approval status'), (2, 'Trip status')])),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
                ('order', models.IntegerField(blank=True, null=True)),
                ('color', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'ordering': ['used_for', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(max_length=100, verbose_name='last name')),
                ('address', models.CharField(default='343 Université Avenue, Moncton, NB, E1C 9B6', max_length=1000, verbose_name='address')),
                ('phone', models.CharField(max_length=1000, verbose_name='phone')),
                ('email', models.EmailField(max_length=254, verbose_name='email')),
                ('public_servant', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=True)),
                ('company_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='company name (leave blank if DFO)')),
                ('trip_title', models.CharField(max_length=1000, verbose_name='trip title')),
                ('departure_location', models.CharField(blank=True, max_length=1000, null=True, verbose_name='departure location')),
                ('destination', models.CharField(blank=True, max_length=1000, null=True, verbose_name='destination location')),
                ('start_date', models.DateTimeField(verbose_name='start date of travel')),
                ('end_date', models.DateTimeField(verbose_name='end date of travel')),
                ('event', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=False, verbose_name='is this a registered event')),
                ('role_of_participant', models.TextField(blank=True, null=True, verbose_name='role of participant (More expansive than just saying he/she “present a paper” for example.  This should describe how does his/her role at the event relate to his/her role at DFO)')),
                ('objective_of_event', models.TextField(blank=True, null=True, verbose_name='objective of the event (Brief description of what the event is about.  Not objective of the Participants in going to the event.)')),
                ('benefit_to_dfo', models.TextField(blank=True, null=True, verbose_name='benefit to DFO (What does DFO get out of this? Saves money, better programs, etc…)')),
                ('multiple_conferences_rationale', models.TextField(blank=True, null=True, verbose_name='rationale for individual attending multiple conferences')),
                ('multiple_attendee_rationale', models.TextField(blank=True, null=True, verbose_name='rationale for multiple attendees at this event')),
                ('funding_source', models.TextField(blank=True, null=True, verbose_name='funding source')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='optional notes (will not be included in travel plan)')),
                ('air', models.FloatField(blank=True, null=True, verbose_name='air fare costs')),
                ('rail', models.FloatField(blank=True, null=True, verbose_name='rail costs')),
                ('rental_motor_vehicle', models.FloatField(blank=True, null=True, verbose_name='rental motor vehicles costs')),
                ('personal_motor_vehicle', models.FloatField(blank=True, null=True, verbose_name='personal motor vehicles costs')),
                ('taxi', models.FloatField(blank=True, null=True, verbose_name='taxi costs')),
                ('other_transport', models.FloatField(blank=True, null=True, verbose_name='other transport costs')),
                ('accommodations', models.FloatField(blank=True, null=True, verbose_name='accommodation costs')),
                ('meals', models.FloatField(blank=True, null=True, verbose_name='meal costs')),
                ('incidentals', models.FloatField(blank=True, null=True, verbose_name='incidental costs')),
                ('registration', models.FloatField(blank=True, null=True, verbose_name='registration')),
                ('other', models.FloatField(blank=True, null=True, verbose_name='other costs')),
                ('total_cost', models.FloatField(blank=True, null=True, verbose_name='total trip cost')),
                ('submitted', models.DateTimeField(blank=True, null=True, verbose_name='date sumbitted')),
                ('recommender_1_approval_date', models.DateTimeField(blank=True, null=True, verbose_name='recommender 1 approval date')),
                ('recommender_2_approval_date', models.DateTimeField(blank=True, null=True, verbose_name='recommender 2 approval date')),
                ('recommender_3_approval_date', models.DateTimeField(blank=True, null=True, verbose_name='recommender 3 approval date')),
                ('approver_approval_date', models.DateTimeField(blank=True, null=True, verbose_name='expenditure initiation approval date')),
                ('approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='approver_trips', to=settings.AUTH_USER_MODEL, verbose_name='approver')),
                ('approver_approval_status', models.ForeignKey(default=4, limit_choices_to={'used_for': 1}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='approver_trips', to='travel.Status', verbose_name='expenditure initiation approval status')),
                ('bta_attendees', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='Other attendees covered under BTA')),
                ('fiscal_year', models.ForeignKey(blank=True, default=2020, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='shared_models.FiscalYear', verbose_name='fiscal year')),
                ('purpose', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='travel.Purpose', verbose_name='purpose of travel')),
                ('reason', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='travel.Reason', verbose_name='reason for travel')),
                ('recommender_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='recommender_1_trips', to=settings.AUTH_USER_MODEL, verbose_name='recommender 1')),
                ('recommender_1_approval_status', models.ForeignKey(default=4, limit_choices_to={'used_for': 1}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='rec1_trips', to='travel.Status', verbose_name='recommender 1 approval status')),
                ('recommender_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='recommender_2_trips', to=settings.AUTH_USER_MODEL, verbose_name='recommender 2')),
                ('recommender_2_approval_status', models.ForeignKey(default=4, limit_choices_to={'used_for': 1}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='rec2_trips', to='travel.Status', verbose_name='recommender 2 approval status')),
                ('recommender_3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='recommender_3_trips', to=settings.AUTH_USER_MODEL, verbose_name='recommender 3')),
                ('recommender_3_approval_status', models.ForeignKey(default=4, limit_choices_to={'used_for': 1}, on_delete=django.db.models.deletion.DO_NOTHING, related_name='rec3_trips', to='travel.Status', verbose_name='recommender 3 approval status')),
                ('registered_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='trips', to='travel.RegisteredEvent', verbose_name='registered event')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='travel.Role', verbose_name='role of participant')),
                ('section', models.ForeignKey(blank=True, limit_choices_to={'division__branch': 1}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='shared_models.Section', verbose_name='DFO section')),
                ('status', models.ForeignKey(blank=True, limit_choices_to={'used_for': 2}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='trips', to='travel.Status', verbose_name='Trip approval status')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_trips', to=settings.AUTH_USER_MODEL, verbose_name='connected user')),
                ('waiting_on', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='waiting_on_trips', to=settings.AUTH_USER_MODEL, verbose_name='Waiting on')),
            ],
            options={
                'ordering': ['start_date', 'last_name'],
            },
        ),
    ]
