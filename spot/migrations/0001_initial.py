# Generated by Django 3.1.2 on 2021-07-08 22:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AgreementDatabase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgreementStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgreementType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CapacityBuilding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CoreComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CUIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CUName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataAnalysisMethodType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Database',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataCheckEntryBarrier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataCommunicationRecipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataEntryMethodType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataProducts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataProgram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataPrograms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataQuality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataQualityLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataQualityType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataSubType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DFOLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EcoSystemType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FieldWorkMethodType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FisherySupportLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FNCommunications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FNRelationshipLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FundingAmount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FundingSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FundingYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HelpText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=255)),
                ('help_text', models.TextField(verbose_name='English text')),
            ],
            options={
                'ordering': ['field_name'],
            },
        ),
        migrations.CreateModel(
            name='LakeSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LinkedGovernmentOrganizations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MethodDocumentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModelsUsed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MonitoringApproach',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_description', models.CharField(blank=True, max_length=1000, null=True, verbose_name='task description')),
                ('key_element', models.CharField(blank=True, max_length=10, null=True, verbose_name='key element')),
                ('activity', models.CharField(blank=True, max_length=10, null=True, verbose_name='activity')),
                ('element_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='element title')),
                ('activity_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='activity title')),
                ('pst_requirement', models.BooleanField(default=False, verbose_name='PST requirement identified?')),
                ('target_sample_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='target sample number')),
                ('sil_requirement', models.BooleanField(default=False, verbose_name='SIL requirement')),
                ('expected_results', models.CharField(blank=True, max_length=255, null=True, verbose_name='expected results')),
                ('dfo_report', models.CharField(blank=True, max_length=255, null=True, verbose_name='Products/Reports to provide dfo')),
                ('outcome_deadline_met', models.BooleanField(default=False, verbose_name='was outcomes deadline acheived')),
                ('outcomes_comment', models.TextField(blank=True, max_length=1000, null=True, verbose_name='outcome comment')),
                ('key_lesson', models.TextField(blank=True, max_length=1000, null=True, verbose_name='key lessons learned')),
                ('missed_opportunities', models.TextField(blank=True, max_length=1000, null=True, verbose_name='missed opportunities')),
                ('date_last_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date last modified')),
                ('capacity_building', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_objective', to='spot.capacitybuilding', verbose_name='what capacity building did this project provide')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='last modified by')),
            ],
            options={
                'ordering': ['location'],
            },
        ),
        migrations.CreateModel(
            name='ObjectiveCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000, verbose_name='name')),
                ('address', models.CharField(blank=True, max_length=1000, null=True, verbose_name='address')),
                ('phone', models.CharField(blank=True, max_length=100, null=True, verbose_name='phone')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='city')),
                ('email', models.EmailField(blank=True, max_length=1000, null=True, verbose_name='email')),
                ('website', models.URLField(blank=True, null=True, verbose_name='website')),
                ('section', models.CharField(blank=True, max_length=255, null=True, verbose_name='section')),
                ('date_last_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date last modified')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organization_country', to='spot.country', verbose_name='country')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organization_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='last modified by')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OrgType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutcomeBarrier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutcomeCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutcomeDeliverable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutcomeQuality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='last name')),
                ('phone', models.CharField(blank=True, max_length=100, null=True, verbose_name='phone')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='city')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='address')),
                ('section', models.CharField(blank=True, max_length=100, null=True, verbose_name='section')),
                ('other_membership', models.TextField(blank=True, max_length=1000, null=True, verbose_name='other membership')),
                ('date_last_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date last modified')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='last modified by')),
                ('organizations', models.ManyToManyField(blank=True, default=None, to='spot.Organization', verbose_name='organization')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='PlanningMethodType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agreement_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='agreement number')),
                ('name', models.CharField(blank=True, max_length=1000, null=True, verbose_name='project name')),
                ('project_description', models.TextField(blank=True, max_length=1000, null=True, verbose_name='project description')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='starting date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end date')),
                ('management_area', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(142)], verbose_name='management area')),
                ('region', models.CharField(blank=True, choices=[('YUKON/TRANSBOUNDARY', 'Yukon/Transboundary'), ('NORTH COAST', 'North Coast'), ('SOUTH COAST', 'South Coast'), ('FRASER', 'Fraser')], default=None, max_length=32, null=True, verbose_name='region')),
                ('cu_index', models.CharField(blank=True, max_length=100, null=True, verbose_name='CU index')),
                ('cu_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='CU name')),
                ('species', models.CharField(blank=True, choices=[('CH', 'Chinook Salmon (Oncorhynchus tshawytscha)'), ('CM', 'Chum Salmon (Oncorhynchus keta)'), ('CO', 'Coho Salmon (Oncorhynchus kisutch)'), ('PK', 'Pink Salmon (Oncorhynchus gorbuscha)'), ('SK', 'Sockeye Salmon (Oncorhynchus nerka)'), ('ST', 'Steelhead (Oncorhynchus mykiss)'), ('UNKNOWN', 'Unknown'), ('N/A', 'Not applicable'), ('OTHER', 'Other')], default=None, max_length=10, verbose_name='target species')),
                ('salmon_life_cycle', models.CharField(blank=True, choices=[('ADULT', 'Adult – adult salmon residing in the ocean; or are migrating in the river.'), ('JUVENILE', 'Juvenile – Fish in the fry, parr & smolt stage of life.'), ('SPAWNING', 'Spawning – a phase of the salmonid life cycle where male and female fish are in the spawning grounds, are mature and able to spawn.'), ('INCUBATION', 'Incubation – Inter-gravel development phase including the egg and alevin life cycle stages.'), ('UNKNOWN', 'Unknown'), ('N/A', 'Not applicable'), ('OTHER', 'Other')], default=None, max_length=32, verbose_name='salmon life cycle')),
                ('project_stage', models.CharField(blank=True, choices=[('PROPOSED', 'proposed'), ('DEVELOPING', 'Developing'), ('PILOT', 'Pilot'), ('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('TERMINATED', 'Terminated'), ('UNKNOWN', 'Unknown'), ('N/A', 'Not applicable'), ('OTHER', 'Other')], default=None, max_length=32, null=True, verbose_name='project stage')),
                ('project_purpose', models.CharField(blank=True, choices=[('Biological', (('POPULATION ESTIMATES', 'Population Estimates'), ('RUN RECONSTRUCTION', 'Run Reconstruction'), ('BIOLOGICAL ABUNDANCE BENCHMARKS', 'Biological Abundance Benchmarks'), ('TERMINAL ABUNDANCE', 'Terminal Abundance'), ('IN-RIVER ABUNDANCE', 'In-River Abundance'), ('CATCH ESTIMATES', 'Catch Estimates'), ('SMOLT ABUNDANCE', 'Smolt Abundance'), ('ADULT ABUNDANCE', 'Adult Abundance'), ('ADMINISTRATION', 'Administration'), ('RECOVERY', 'Recovery'), ('REBUILDING', 'Rebuilding'), ('ENHANCEMENT', 'Enhancement'))), ('Catch/Fisheries', (('FOODS, SOCIAL AND CEREMONIAL FISHERIES', 'Foods, Social and Ceremonial Fisheries'), ('FRASER RECREATIONAL', 'Fraser Recreational'), ('FRASER ECONOMIC OPPORTUNITY (EO)', 'Fraser Economic Opportunity (EO)'), ('FRASER COMMERCIAL (IN-RIVER PORTIONS OF AREA', 'Fraser Commercial (in-river portions of Area'), ('29E (GILLNET) AND AREA 29B (SEINE)', '29E (Gillnet) and Area 29B (Seine)'), ('FRASER TEST FISHERIES (ALBION, QUALARK)', 'Fraser Test Fisheries (Albion, Qualark)'), ('MARINE FISHERIES', 'Marine Fisheries'), ('JUAN DE FUCA RECREATIONAL', 'Juan de Fuca Recreational'), ('WEST COAST VANCOUVER ISLAND RECREATIONAL', 'West Coast Vancouver Island Recreational'), ('NORTHERN BRITISH COLUMBIA RECREATIONAL', 'Northern British Columbia Recreational'), ('WEST COAST VANCOUVER ISLAND COMMERCIAL', 'West Coast Vancouver Island Commercial'), ('TROLL', 'Troll'), ('NORTHERN BC COMMERCIAL TROLL', 'Northern BC Commercial Troll'), ('TAAQ-WIIHAK', 'Taaq-wiihak'), ('FISH PASSAGE', 'Fish Passage'))), ('Habitat', (('WATER LEVELS', 'Water Levels'), ('RIPARIAN', 'Riparian'), ('ESTUARINE', 'Estuarine'), ('NEARSHORE & MARINE', 'Nearshore & Marine'), ('INSTREAM STRUCTURE', 'Instream Structure'), ('FLOODPLAIN CONNECTIVITY', 'Floodplain connectivity'), ('WATERSHED', 'Watershed'), ('NUTRIENT SUPPLEMENTATION', 'Nutrient Supplementation'), ('HABITAT CONDITION', 'Habitat Condition'), ('UNKNOWN', 'Unknown'), ('N/A', 'Not applicable'), ('OTHER', 'Other')))], max_length=50, null=True, verbose_name='project purpose')),
                ('category_comments', models.TextField(blank=True, max_length=1000, null=True, verbose_name='category comments')),
                ('DFO_program_reference', models.TextField(blank=True, max_length=1000, null=True, verbose_name='other non-DFO project link')),
                ('government_reference', models.TextField(blank=True, max_length=1000, null=True, verbose_name='government reference')),
                ('contractor', models.TextField(blank=True, max_length=1000, null=True, verbose_name='contractors')),
                ('primary_contact_contractor', models.TextField(blank=True, max_length=1000, null=True, verbose_name='primary contact contractor')),
                ('date_last_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date last modified')),
                ('DFO_aboriginal_AAA', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='DFO_aboriginal_AAA', to='spot.person', verbose_name='DFO aboriginal AAA')),
                ('DFO_area_chief', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='DFO_area_chief', to='spot.person', verbose_name='DFO area chief')),
                ('DFO_link', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='DFO_link', to='spot.dfolink', verbose_name='other DFO project link')),
                ('DFO_project_authority', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='DFO_project_authority', to='spot.person', verbose_name='DFO project authority')),
                ('DFO_resource_manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='DFO_resource_manager', to='spot.person', verbose_name='DFO resource manager')),
                ('DFO_technicians', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='DFO_technicians', to='spot.person', verbose_name='DFO technicians')),
                ('core_component', models.ManyToManyField(blank=True, related_name='core_component', to='spot.CoreComponent', verbose_name='core component')),
                ('ecosystem_type', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='eco_system_type', to='spot.ecosystemtype', verbose_name='eco system type')),
                ('government_organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='government_organization', to='spot.linkedgovernmentorganizations', verbose_name='government organization')),
                ('lake_system', models.ManyToManyField(blank=True, default=None, related_name='project', to='spot.LakeSystem', verbose_name='lake system')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='last modified by')),
                ('monitoring_approach', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='monitoring_approach', to='spot.monitoringapproach', verbose_name='monitoring approach')),
                ('partner', models.ManyToManyField(blank=True, related_name='partner', to='spot.Organization', verbose_name='partner')),
                ('primary_contact_partner', models.ManyToManyField(blank=True, related_name='primary_contact_partner', to='spot.Person', verbose_name='primary contact partner')),
                ('primary_first_nations_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='primary_first_nations_contact', to='spot.person', verbose_name='primary first nations contact')),
            ],
            options={
                'ordering': ['agreement_number', 'name', 'region', 'primary_river', 'DFO_project_authority'],
            },
        ),
        migrations.CreateModel(
            name='ProjectClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectLeadOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectPurpose',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectScale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectStage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectStrategicLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectSubType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectTheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportClient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportFormatProgramLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportFormatProjectLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportingMethodType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportProblemAddressedContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportPurpose',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportSentTo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportTimeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportTopicProgramLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReportType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='River',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='name')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='longitude')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SalmonStage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleBarrier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleProcessingMethodType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SamplesCollected',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SamplesCollectedDatabase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SMUCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SMUName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StrategicAgreementLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SupportComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Watershed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Reports',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_concerns', models.TextField(blank=True, max_length=1000, null=True, verbose_name='report limitations and concerns')),
                ('document_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='document name')),
                ('document_author', models.CharField(blank=True, max_length=255, null=True, verbose_name='document author')),
                ('document_location', models.CharField(blank=True, max_length=255, null=True, verbose_name='document location')),
                ('document_reference_information', models.CharField(blank=True, max_length=255, null=True, verbose_name='document reference information')),
                ('document_link', models.CharField(blank=True, max_length=255, null=True, verbose_name='document link')),
                ('date_last_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date last modified')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='last modified by')),
                ('project', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project_report', to='spot.project', verbose_name='agreement number')),
                ('report_timeline', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_report', to='spot.reporttimeline', verbose_name='report timeline')),
                ('report_type', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_report', to='spot.reporttype', verbose_name='report type')),
            ],
            options={
                'ordering': ['document_name'],
            },
        ),
        migrations.AddField(
            model_name='project',
            name='primary_first_nations_contact_role',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='primary_first_nations_contact_role', to='spot.role', verbose_name='primary first nations contact role'),
        ),
        migrations.AddField(
            model_name='project',
            name='primary_river',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='primary_river', to='spot.river', verbose_name='primary river'),
        ),
        migrations.AddField(
            model_name='project',
            name='project_scale',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_scale', to='spot.projectscale', verbose_name='project scale'),
        ),
        migrations.AddField(
            model_name='project',
            name='project_sub_type',
            field=models.ManyToManyField(blank=True, default=None, related_name='project_sub_type', to='spot.ProjectSubType', verbose_name='project sub type'),
        ),
        migrations.AddField(
            model_name='project',
            name='project_theme',
            field=models.ManyToManyField(blank=True, default=None, related_name='project_theme', to='spot.ProjectTheme', verbose_name='project theme'),
        ),
        migrations.AddField(
            model_name='project',
            name='project_type',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_type', to='spot.projecttype', verbose_name='project type'),
        ),
        migrations.AddField(
            model_name='project',
            name='secondary_river',
            field=models.ManyToManyField(blank=True, related_name='secondary_river', to='spot.River', verbose_name='secondary river'),
        ),
        migrations.AddField(
            model_name='project',
            name='smu_name',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='smu_name', to='spot.smuname', verbose_name='SMU name'),
        ),
        migrations.AddField(
            model_name='project',
            name='supportive_component',
            field=models.ManyToManyField(blank=True, related_name='supportive_component', to='spot.SupportComponent', verbose_name='supportive component'),
        ),
        migrations.AddField(
            model_name='project',
            name='tribal_council',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tribal_council', to='spot.organization', verbose_name='tribal council'),
        ),
        migrations.AddField(
            model_name='project',
            name='watershed',
            field=models.ManyToManyField(blank=True, default=None, related_name='proeject', to='spot.Watershed', verbose_name='watershed'),
        ),
        migrations.AddField(
            model_name='person',
            name='province',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='spot.province', verbose_name='province/state'),
        ),
        migrations.AddField(
            model_name='person',
            name='role',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='spot.role', verbose_name='role'),
        ),
        migrations.AddField(
            model_name='organization',
            name='organization_type',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organization_type', to='spot.orgtype', verbose_name='organization type'),
        ),
        migrations.AddField(
            model_name='organization',
            name='province',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organization_province', to='spot.province', verbose_name='province/state'),
        ),
        migrations.CreateModel(
            name='ObjectiveDataTypeQuality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('outcome_delivered', models.BooleanField(default=False, verbose_name='was the outcome/sample delivered?')),
                ('outcome_report_delivered', models.BooleanField(default=False, verbose_name='were outcome reports delivered?')),
                ('objective', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='objective_type_quality', to='spot.objective', verbose_name='objective')),
                ('outcome_deliverable', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='objective_type_quality', to='spot.outcomedeliverable', verbose_name='outcome/deliverable')),
                ('outcome_quality', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='objective_type_quality', to='spot.outcomequality', verbose_name='quality of outcome')),
                ('report_sent_to', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='objective_type_quality', to='spot.reportsentto', verbose_name='reporting sent to')),
            ],
            options={
                'ordering': ['outcome_deliverable'],
            },
        ),
        migrations.AddField(
            model_name='objective',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_objective', to='spot.river', verbose_name='location'),
        ),
        migrations.AddField(
            model_name='objective',
            name='objective_category',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_objective', to='spot.objectivecategory', verbose_name='Objective Category'),
        ),
        migrations.AddField(
            model_name='objective',
            name='outcome_barrier',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_objective', to='spot.outcomebarrier', verbose_name='barrier to achieve outcomes?'),
        ),
        migrations.AddField(
            model_name='objective',
            name='outcomes_contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_objective', to='spot.person', verbose_name='Outcomes Contact'),
        ),
        migrations.AddField(
            model_name='objective',
            name='project',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project_objective', to='spot.project', verbose_name='agreement number'),
        ),
        migrations.AddField(
            model_name='objective',
            name='report_reference',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_objective', to='spot.reports', verbose_name='report reference'),
        ),
        migrations.AddField(
            model_name='objective',
            name='sample_type',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_objective', to='spot.sampletype', verbose_name='sample type/specific data item'),
        ),
        migrations.AddField(
            model_name='objective',
            name='species',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_objective', to='spot.species', verbose_name='species'),
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shared_drive', models.CharField(blank=True, max_length=255, null=True, verbose_name='If you have chosen one of the shared drives please specify what drive otherwise leave blank')),
                ('authors', models.CharField(blank=True, max_length=100, null=True, verbose_name='author')),
                ('publication_year', models.CharField(blank=True, max_length=10, null=True, verbose_name='year of publication')),
                ('title', models.CharField(blank=True, max_length=100, null=True, verbose_name='title')),
                ('reference_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='reference number')),
                ('publisher', models.CharField(blank=True, max_length=100, null=True, verbose_name='publisher')),
                ('document_link', models.CharField(blank=True, max_length=255, null=True, verbose_name='document link')),
                ('date_last_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date last modified')),
                ('DNA_processing_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_method_DNA', to='spot.organization', verbose_name='DNA processing location')),
                ('data_entry_method_type', models.ManyToManyField(blank=True, default=None, related_name='project_method', to='spot.DataEntryMethodType', verbose_name='data entry method type')),
                ('field_work_method_type', models.ManyToManyField(blank=True, default=None, related_name='project_method', to='spot.FieldWorkMethodType', verbose_name='field work methods type/class')),
                ('heads_processing_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_method_heads', to='spot.organization', verbose_name='heads processing location')),
                ('instrument_data_processing_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_method_instrument', to='spot.organization', verbose_name='instrument_data_processing_location')),
                ('last_modified_by', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='last modified by')),
                ('method_document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_method', to='spot.methoddocumenttype', verbose_name='method document type')),
                ('otolith_processing_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_method_otolith', to='spot.organization', verbose_name='otolith processing location')),
                ('planning_method_type', models.ManyToManyField(blank=True, default=None, related_name='project_method', to='spot.PlanningMethodType', verbose_name='planning method type')),
                ('project', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project_method', to='spot.project', verbose_name='agreement number')),
                ('sample_processing_method_type', models.ManyToManyField(blank=True, default=None, related_name='project_method', to='spot.SampleProcessingMethodType', verbose_name='sample processing method type')),
                ('scale_processing_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_method_scale', to='spot.organization', verbose_name='scale processing location')),
            ],
            options={
                'ordering': ['project'],
            },
        ),
        migrations.CreateModel(
            name='Meetings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='name')),
                ('location', models.CharField(blank=True, max_length=255, null=True, verbose_name='location')),
                ('description', models.TextField(blank=True, max_length=1000, null=True, verbose_name='description')),
                ('date_last_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date last modified')),
                ('FN_communications', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='spot.fncommunications', verbose_name='FN communications')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='last modified by')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(blank=True, max_length=1000, null=True, verbose_name='comments')),
                ('date_last_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date last modified')),
                ('sent_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='sent by')),
                ('subject', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='spot.subject', verbose_name='subject')),
            ],
            options={
                'ordering': ['subject'],
            },
        ),
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('samples_collected_comment', models.TextField(blank=True, max_length=1000, null=True, verbose_name='samples collected comment')),
                ('sample_entered_database', models.BooleanField(blank=True, default=False, null=True, verbose_name='was sample collection entered into database?')),
                ('data_quality_check', models.BooleanField(blank=True, default=False, null=True, verbose_name='was sample data quality check complete?')),
                ('data_quality_person', models.CharField(blank=True, max_length=255, null=True, verbose_name='person responsible for data quality check?')),
                ('data_products_comment', models.TextField(blank=True, max_length=1000, null=True, verbose_name='data products comment')),
                ('date_last_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date last modified')),
                ('barrier_data_check_entry', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_data', to='spot.datacheckentrybarrier', verbose_name='Barriers to data checks/entry to database?')),
                ('data_communication_recipient', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_data', to='spot.datacommunicationrecipient', verbose_name='data communication recipient')),
                ('data_products', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_data', to='spot.dataproducts', verbose_name='data products')),
                ('data_products_database', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_data_products', to='spot.samplescollecteddatabase', verbose_name='data products database')),
                ('data_programs', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_data', to='spot.dataprograms', verbose_name='data programs')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='last modified by')),
                ('project', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project_data', to='spot.project', verbose_name='agreement number')),
                ('sample_barrier', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_data', to='spot.samplebarrier', verbose_name='barriers to sample collection')),
                ('sample_format', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_data', to='spot.sampleformat', verbose_name='sample format')),
                ('samples_collected', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_data', to='spot.samplescollected', verbose_name='sameples collected')),
                ('samples_collected_database', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_data_samples', to='spot.samplescollecteddatabase', verbose_name='samples collected database')),
                ('species_data', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_data', to='spot.species', verbose_name='species data')),
            ],
            options={
                'ordering': ['species_data'],
            },
        ),
        migrations.CreateModel(
            name='AgreementLineage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agreement_database', models.CharField(blank=True, choices=[('APGIS', 'APGIS - Aboriginal Programs and Governance Information System'), ('UNKNOWN', 'Unknown'), ('N/A', 'Not Applicable'), ('OTHER', 'Other')], default=None, max_length=32, null=True, verbose_name='agreement database')),
                ('agreement_status', models.CharField(blank=True, choices=[('CERTIFIED', 'Certified'), ('UNCERTIFIED', 'Uncertified'), ('UNKNOWN', 'Unknown'), ('OTHER', 'Other')], default=None, max_length=32, null=True, verbose_name='agreement status')),
                ('agreement_status_comment', models.TextField(blank=True, max_length=1000, null=True, verbose_name='agreement status comment')),
                ('funding_sources', models.CharField(blank=True, choices=[('AFS', 'AFS – Aboriginal Fisheries Strategy'), ('AAROM', 'AAROM – Aboriginal Aquatic Resources and Oceans Management'), ('PST (TBG&C)', 'PST (TBG&C) – Pacific Salmon Treaty/Treasury Board Grants & Contributions'), ('SCIENCE', 'Science – Program funding redirected to a G&C agreement'), ('HSP', 'HSP – Habitat Stewardship Program'), ('BCSRIF', 'BCSRIF – British Columbia Salmon Restoration and Innovation Fund'), ('CNFASAR', 'CNFASAR – Canadian Nature Fund for Aquatic Species at Risk'), ('CRF', 'CRF – Coastal Restoration Fund'), ('FHRI', 'FHRI – Fisheries Habitat Restoration Initiative'), ('IHPP', 'IHPP – Indigenous Habitat Participation Program'), ('RFCPP', 'RFCPP – Recreational Fisheries Conservation Partnership Program'), ('PSSI', 'PSSI - Pacific Salmon Strategy Initiative'), ('AFSAR', 'AFSAR - Aboriginal Fund for Species at Risk'), ('SEP', 'SEP - Salmon Enhancement Program'), ('AHRF', 'AHRF - Aquatic Habitat Restoration Fund'), ('SSI', 'SSI- Salish Sea Initiative'), ('OTHER', 'Other – Add Name and Definition'), ('UNKNOWN', 'Unknown')], default=None, max_length=32, null=True, verbose_name='funding sources')),
                ('other_funding_sources', models.CharField(blank=True, max_length=255, null=True, verbose_name='If you have chosen other above please enter the source here')),
                ('agreement_type', models.CharField(blank=True, choices=[('FORMAL AGREEMENT', 'Formal Agreement'), ('AMENDMENT', 'Amendment'), ('FIRST NATIONS TREATY AGREEMENT', 'First Nations Treaty Agreement'), ('SUPPLY ARRANGEMENT', 'Supply Arrangement'), ('UNKNOWN', 'Unknown'), ('N/A', 'Not applicable'), ('OTHER', 'Other')], default=None, max_length=32, null=True, verbose_name='agreement type ')),
                ('project_lead_organization', models.CharField(blank=True, choices=[('FIRST NATIONS', 'First Nations'), ('DFO', 'DFO'), ('COLLABORATIVE', 'Collaborative'), ('UNKNOWN', 'Unknown'), ('N/A', 'Not applicable'), ('OTHER', 'Other')], default=None, max_length=32, null=True, verbose_name='project lead organization')),
                ('agreement_cost', models.PositiveIntegerField(blank=True, null=True, verbose_name='agreement cost')),
                ('salmon_relevant_cost', models.PositiveIntegerField(blank=True, null=True, verbose_name='salmon relevant cost')),
                ('date_last_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date last modified')),
                ('funding_years', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='project_lineage', to='spot.fundingyear', verbose_name='funding year')),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='last modified by')),
                ('lineage', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='spot.project', verbose_name='lineage number')),
                ('project', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project_lineage', to='spot.project', verbose_name='agreement number')),
            ],
            options={
                'ordering': ['project'],
            },
        ),
    ]
