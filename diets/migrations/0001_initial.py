# Generated by Django 2.1.4 on 2018-12-21 17:14

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cruise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cruise_number', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('chief_scientist', models.CharField(max_length=255)),
                ('samplers', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('season', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Predator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence_number', models.IntegerField(blank=True, null=True)),
                ('fish_number', models.IntegerField(blank=True, null=True)),
                ('processing_date', models.DateTimeField(blank=True, null=True, verbose_name='processing date (yyyy-mm-dd)')),
                ('sampler', models.CharField(blank=True, max_length=500, null=True)),
                ('set', models.IntegerField(blank=True, null=True)),
                ('stratum', models.IntegerField(blank=True, null=True)),
                ('collection_date', models.DateTimeField(blank=True, null=True, verbose_name='collection date (yyyy-mm-dd)')),
                ('collection_year', models.IntegerField(blank=True, null=True)),
                ('collection_month', models.IntegerField(blank=True, null=True)),
                ('collection_day', models.IntegerField(blank=True, null=True)),
                ('somatic_length_mm', models.FloatField(blank=True, null=True, verbose_name='somatic length (mm)')),
                ('somatic_wt_g', models.FloatField(blank=True, null=True, verbose_name='somatic weight (g)')),
                ('stomach_wt_g', models.FloatField(blank=True, null=True, verbose_name='stomach weight (g)')),
                ('comments', models.TextField(blank=True, null=True)),
                ('old_seq_num', models.IntegerField(blank=True, null=True)),
                ('cruise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='predators', to='diets.Cruise')),
            ],
            options={
                'ordering': ['cruise', 'species'],
            },
        ),
        migrations.CreateModel(
            name='Prey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('digestion_level', models.IntegerField(blank=True, null=True)),
                ('somatic_wt_g', models.FloatField(blank=True, null=True, verbose_name='somatic weight (g)')),
                ('somatic_length_mm', models.FloatField(blank=True, null=True, verbose_name='somatic length (mm)')),
                ('stomach_wt_g', models.FloatField(blank=True, null=True, verbose_name='stomach weight (g)')),
                ('predator', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='diets.Predator')),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('common_name_eng', models.CharField(blank=True, max_length=255, null=True, verbose_name='english name')),
                ('common_name_fre', models.CharField(blank=True, max_length=255, null=True, verbose_name='french name')),
                ('scientific_name', models.CharField(blank=True, max_length=255, null=True)),
                ('code', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('tsn', models.IntegerField(blank=True, null=True, verbose_name='ITIS TSN')),
                ('aphia_id', models.IntegerField(blank=True, null=True, verbose_name='AphiaID')),
                ('sav', models.BooleanField(default=False, verbose_name='Submerged aquatic vegetation (SAV)')),
                ('notes', models.TextField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['common_name_eng'],
            },
        ),
        migrations.CreateModel(
            name='Vessel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('call_sign', models.CharField(blank=True, max_length=56, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='prey',
            name='species',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='diets.Species'),
        ),
        migrations.AddField(
            model_name='predator',
            name='prey_items',
            field=models.ManyToManyField(through='diets.Prey', to='diets.Species'),
        ),
        migrations.AddField(
            model_name='predator',
            name='species',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='predators', to='diets.Species'),
        ),
        migrations.AddField(
            model_name='cruise',
            name='vessel',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='missions', to='diets.Vessel'),
        ),
        migrations.AlterUniqueTogether(
            name='prey',
            unique_together={('species', 'predator')},
        ),
    ]
