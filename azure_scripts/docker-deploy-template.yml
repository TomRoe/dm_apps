parameters:
  - name: AAD_APP_SECRET
    type: string

  - name: DB_PASSWORD_PIPELINE
    type: string

  - name: DB_PASSWORD_WEB
    type: string

  - name: GITHUB_API_KEY
    type: string

  - name: SECRET_KEY
    type: string

  - name: SENDGRID_API_KEY
    type: string

  - name: PIPELINE_VARS_TO_USE
    type: string

steps:
  - task: OneLuckiDev.json2variable.vsts-json-to-variable.oneLuckiDevJson2Variable@1
    displayName: 'JSON to Variable'
    inputs:
      jsonFile: $(Build.SourcesDirectory)/azure_scripts/pipeline_vars.json
      shouldPrefixVariables: false

  - script: |
      az login --identity -u $(AZURE_MSI_CLIENT_ID.dev)
      # az account set --subscription="IMTS DEV/TEST"

      # install pre-requisites
      python3.8 -m pip install --upgrade pip setuptools wheel
      sudo apt-get install libmysqlclient-dev
      python3.8 -m pip install -r requirements.txt
      python3.8 -m pip uninstall -y django-easy-pdf
      python3.8 -m pip install git+https://github.com/pawanvirsingh/django-easy-pdf.git#egg=django-easy-pdf


      # create env file
      python3.8 create_env_file.py --db-host "$(DB_HOST.dev)" \
      --db-port 3306 \
      --db-name "$(DB_NAME.dev)" \
      --db-user "$(DB_USER_PIPELINE.dev)" \
      --db-password "${{parameters.DB_PASSWORD_PIPELINE}}" \
      --deployment-stage "$(DEPLOYMENT_STAGE.dev)" \
      --azure-storage-account-name "$(AZURE_STORAGE_ACCOUNT_NAME.dev)" \
      --azure-msi-client-id "$(AZURE_MSI_CLIENT_ID.dev)"


      # run migrations and collect static files
      python3.8 manage.py migrate
      python3.8 manage.py collectstatic --no-input

      # remove the env file
      rm .env


    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Run Migrations and Staticfiles'

  - task: AzureRmWebAppDeployment@4
    displayName: 'Deploy Docker Image to $(WEB_APP_NAME.dev)'
    inputs:
      ConnectedServiceName: msi.dmapps
      appType: webAppContainer
      WebAppName: $(WEB_APP_NAME.dev)
      DockerNamespace: $(DockerNamespace.dev)
      DockerRepository: $(DockerRepository.dev)
      DockerImageTag: $(DockerImageTag.dev)
      StartupCommand: init.sh
      AppSettings: >-
        -WEBSITES_PORT 8000
        -AAD_APP_ID $(AAD_APP_ID.dev)
        -AAD_APP_SECRET $(AAD_APP_SECRET.dev)
        -AAD_REDIRECT $(AAD_REDIRECT.dev)
        -AZURE_STORAGE_ACCOUNT_NAME $(AZURE_STORAGE_ACCOUNT_NAME.dev)
        -SECRET_KEY $(SECRET_KEY.dev)
        -ALLOWED_HOST_TO_ADD $(WEB_APP_NAME.dev).azurewebsites.net
        -SITE_FROM_EMAIL "DoNotReply@Sci-Zone.dfo-mpo.gc.ca"
        -SHOW_TICKETING_APP $(SHOW_TICKETING_APP.dev)
        -DEPLOYMENT_STAGE $(DEPLOYMENT_STAGE.dev)
        -DB_HOST $(DB_HOST.dev)
        -DB_MODE $(DB_MODE.dev)
        -DB_NAME $(DB_NAME.dev)
        -DB_USER $(DB_USER_WEB.dev)
        -DB_PASSWORD $(DB_PASSWORD_WEB.dev)
        -DB_PORT 3306
        -DEBUG $(DEBUG.dev)
        -AZURE_INSTRUMENTATION_KEY $(AZURE_INSTRUMENTATION_KEY.dev)
        -USE_AZURE_APPLICATION_INSIGHT $(USE_AZURE_APPLICATION_INSIGHT.dev)
        -SENDGRID_API_KEY $(SENDGRID_API_KEY.dev)
        -GITHUB_API_KEY $(GITHUB_API_KEY.dev)
        -DEVOPS_BUILD_NUMBER $(Build.BuildNumber)
        -AZURE_MSI_CLIENT_ID $(AZURE_MSI_CLIENT_ID.dev)

  - task: AzureAppServiceManage@0
    displayName: 'Restart web app service'
    inputs:
      azureSubscription: msi.dmapps
      Action: 'Restart Azure App Service'
      WebAppName: '$(WEB_APP_NAME.dev)'
