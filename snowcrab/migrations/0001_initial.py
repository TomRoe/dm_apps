# Generated by Django 2.0.4 on 2018-11-28 16:51

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Crab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crab_number', models.IntegerField(blank=True, null=True)),
                ('carapace_width', models.FloatField(blank=True, null=True)),
                ('abdomen_width', models.FloatField(blank=True, null=True)),
                ('chela_height', models.FloatField(blank=True, null=True)),
                ('maturity', models.CharField(blank=True, max_length=255, null=True)),
                ('shell_condition_mossy', models.BooleanField(default=False)),
                ('gonad_colour', models.CharField(blank=True, max_length=255, null=True)),
                ('egg_colour', models.CharField(blank=True, max_length=255, null=True)),
                ('eggs_remaining', models.IntegerField(blank=True, null=True)),
                ('tag_number', models.IntegerField(blank=True, null=True)),
                ('missing_legs', models.CharField(blank=True, max_length=10, null=True)),
                ('durometer', models.FloatField(blank=True, null=True)),
                ('samplers', models.CharField(blank=True, max_length=1000, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Set',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('set_name', models.CharField(blank=True, max_length=56, null=True, verbose_name='Tow ID string')),
                ('set_number', models.IntegerField(blank=True, null=True, verbose_name='Daily tow number')),
                ('year', models.IntegerField(blank=True, null=True, verbose_name='Survey year')),
                ('month', models.IntegerField(blank=True, null=True, verbose_name='Survey month')),
                ('day', models.IntegerField(blank=True, null=True, verbose_name='Survey calendar day')),
                ('valid', models.NullBooleanField(verbose_name='Tow quality(i.e. is it valid?)')),
                ('latitude_start_logbook', models.FloatField(blank=True, null=True, verbose_name='Start latitude decimal degrees from logbook')),
                ('latitude_end_logbook', models.FloatField(blank=True, null=True, verbose_name='End latitude decimal degrees from logbook')),
                ('longitude_start_logbook', models.FloatField(blank=True, null=True, verbose_name='Start longitude decimal degrees from logbook')),
                ('longitude_end_logbook', models.FloatField(blank=True, null=True, verbose_name='End longitude decimal degrees from logbook')),
                ('latitude_start', models.FloatField(blank=True, null=True, verbose_name='Start latitude decimal degrees')),
                ('latitude_end', models.FloatField(blank=True, null=True, verbose_name='End latitude decimal degrees')),
                ('longitude_start', models.FloatField(blank=True, null=True, verbose_name='Start longitude decimal degrees')),
                ('longitude_end', models.FloatField(blank=True, null=True, verbose_name='End longitude decimal degrees')),
                ('start_time_logbook', models.DateTimeField(blank=True, null=True, verbose_name='Trawl start time from logbook (hh:mm:ss)')),
                ('end_time_logbook', models.DateTimeField(blank=True, null=True, verbose_name='Trawl end time from logbook (hh:mm:ss)')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='Trawl start time (hh:mm:ss)')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='Trawl end time (hh:mm:ss)')),
                ('depth_logbook', models.FloatField(blank=True, null=True, verbose_name='Observed water depth( in fathoms)')),
                ('bottom_temperature_logbook', models.FloatField(blank=True, null=True, verbose_name='Bottom water temperature')),
                ('warp_logbook', models.IntegerField(blank=True, null=True, verbose_name='Trawl warp length(in fathoms)')),
                ('swept_area', models.FloatField(blank=True, null=True, verbose_name='Tow swept area(square meters)')),
                ('swept_area_method', models.CharField(choices=[('mod', 'model'), ('avg', 'average')], max_length=255, verbose_name='Swept-area calculation method')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Tow comments')),
            ],
        ),
        migrations.CreateModel(
            name='Sex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sex', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ShellCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Vessel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('cvrn', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zone_name', models.CharField(max_length=255)),
                ('nafo_area_code', models.CharField(blank=True, max_length=25, null=True)),
            ],
            options={
                'ordering': ['zone_name'],
            },
        ),
        migrations.AddField(
            model_name='set',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='sets', to='snowcrab.Zone'),
        ),
        migrations.AddField(
            model_name='crab',
            name='set',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='crabs', to='snowcrab.Set'),
        ),
        migrations.AddField(
            model_name='crab',
            name='sex',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='crabs', to='snowcrab.Sex'),
        ),
        migrations.AddField(
            model_name='crab',
            name='shell_condition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='snowcrab.ShellCondition'),
        ),
    ]
