# Generated by Django 3.2.2 on 2021-06-16 18:24

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('trapnet', '0018_auto_20210616_1426'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='observation',
            name='sweep_number',
        ),
        migrations.AddField(
            model_name='sample',
            name='bank_length_left',
            field=models.FloatField(blank=True, help_text='measurement in meters, to 1 decimal', null=True, verbose_name='bank length - left (m)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='bank_length_right',
            field=models.FloatField(blank=True, help_text='measurement in meters, to 1 decimal', null=True, verbose_name='bank length - right (m)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='depth_1_lower',
            field=models.IntegerField(blank=True, help_text='measurement in centimeters, no decimals', null=True, verbose_name='depth #1 - lower (cm)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='depth_1_middle',
            field=models.IntegerField(blank=True, help_text='measurement in centimeters, no decimals', null=True, verbose_name='depth #1 - middle (cm)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='depth_1_upper',
            field=models.IntegerField(blank=True, help_text='measurement in centimeters, no decimals', null=True, verbose_name='depth #1 - upper (cm)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='depth_2_lower',
            field=models.IntegerField(blank=True, help_text='measurement in centimeters, no decimals', null=True, verbose_name='depth #2 - lower (cm)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='depth_2_middle',
            field=models.IntegerField(blank=True, help_text='measurement in centimeters, no decimals', null=True, verbose_name='depth #2 - middle (cm)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='depth_2_upper',
            field=models.IntegerField(blank=True, help_text='measurement in centimeters, no decimals', null=True, verbose_name='depth #2 - upper (cm)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='depth_3_lower',
            field=models.IntegerField(blank=True, help_text='measurement in centimeters, no decimals', null=True, verbose_name='depth #3 - lower (cm)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='depth_3_middle',
            field=models.IntegerField(blank=True, help_text='measurement in centimeters, no decimals', null=True, verbose_name='depth #3 - middle (cm)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='depth_3_upper',
            field=models.IntegerField(blank=True, help_text='measurement in centimeters, no decimals', null=True, verbose_name='depth #3 - upper (cm)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='max_overhanging_veg_left',
            field=models.IntegerField(blank=True, null=True, verbose_name='Max Overhanging Vegetation (m) - Left'),
        ),
        migrations.AddField(
            model_name='sample',
            name='max_overhanging_veg_right',
            field=models.IntegerField(blank=True, null=True, verbose_name='Max Overhanging Vegetation (m) - Right'),
        ),
        migrations.AddField(
            model_name='sample',
            name='overhanging_veg_left',
            field=models.IntegerField(blank=True, null=True, verbose_name='Overhanging Vegetation (%) - Left'),
        ),
        migrations.AddField(
            model_name='sample',
            name='overhanging_veg_right',
            field=models.IntegerField(blank=True, null=True, verbose_name='Overhanging Vegetation (%) - Right'),
        ),
        migrations.AddField(
            model_name='sample',
            name='percent_bedrock',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='bedrock'),
        ),
        migrations.AddField(
            model_name='sample',
            name='percent_boulder',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='boulder'),
        ),
        migrations.AddField(
            model_name='sample',
            name='percent_cobble',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='cobble'),
        ),
        migrations.AddField(
            model_name='sample',
            name='percent_fine',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='fine silt or clay'),
        ),
        migrations.AddField(
            model_name='sample',
            name='percent_flat',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='flat'),
        ),
        migrations.AddField(
            model_name='sample',
            name='percent_gravel',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='gravel'),
        ),
        migrations.AddField(
            model_name='sample',
            name='percent_pebble',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='pebble'),
        ),
        migrations.AddField(
            model_name='sample',
            name='percent_pool',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='pool'),
        ),
        migrations.AddField(
            model_name='sample',
            name='percent_riffle',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='riffle'),
        ),
        migrations.AddField(
            model_name='sample',
            name='percent_rocks',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='rocks'),
        ),
        migrations.AddField(
            model_name='sample',
            name='percent_run',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='run'),
        ),
        migrations.AddField(
            model_name='sample',
            name='percent_sand',
            field=models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='sand'),
        ),
        migrations.AddField(
            model_name='sample',
            name='width_lower',
            field=models.FloatField(blank=True, help_text='measurement in meters, to 1 decimal', null=True, verbose_name='width - lower (m)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='width_middle',
            field=models.FloatField(blank=True, help_text='measurement in meters, to 1 decimal', null=True, verbose_name='width - middle (m)'),
        ),
        migrations.AddField(
            model_name='sample',
            name='width_upper',
            field=models.FloatField(blank=True, help_text='measurement in meters, to 1 decimal', null=True, verbose_name='width - upper (m)'),
        ),
        migrations.AlterField(
            model_name='observation',
            name='sample',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='trapnet.sample'),
        ),
        migrations.AlterField(
            model_name='sample',
            name='water_temp_c',
            field=models.FloatField(blank=True, help_text='In Celcius, to 1 decimal place', null=True, verbose_name='water temperature (Â°C)'),
        ),
        migrations.CreateModel(
            name='Sweep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sweep_time', models.IntegerField(blank=True, help_text='in seconds', null=True, verbose_name='sweep time')),
                ('sweep_number', models.FloatField(blank=True, help_text='open sites are always 0.5. Clsoed sites begin at 0.5, but then are depleted starting at 1, and counting up until depletion is achieved (e.g., 2, 3,...)', null=True, verbose_name='sweep number')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='sweep_created_by', to=settings.AUTH_USER_MODEL)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='sweeps', to='trapnet.sample')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='sweep_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='observation',
            name='sweep',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='trapnet.sweep'),
        ),
    ]
