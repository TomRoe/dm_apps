# Generated by Django 3.2.2 on 2021-06-17 12:35

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import trapnet.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('shared_models', '0015_auto_20210601_1247'),
    ]

    operations = [
        migrations.CreateModel(
            name='Electrofisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LifeStage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Maturity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('code', models.CharField(blank=True, max_length=5, null=True, unique=True)),
            ],
            options={
                'ordering': ['code'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Origin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('code', models.CharField(blank=True, max_length=5, null=True, unique=True)),
            ],
            options={
                'ordering': ['code'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RiverSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='site name')),
                ('stream_order', models.IntegerField(blank=True, null=True)),
                ('elevation_m', models.FloatField(blank=True, null=True, verbose_name='elevation (m)')),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('epsg_id', models.CharField(blank=True, max_length=255, null=True)),
                ('coordinate_resolution', models.FloatField(blank=True, null=True)),
                ('coordinate_precision', models.FloatField(blank=True, null=True)),
                ('coordinate_accuracy', models.FloatField(blank=True, null=True)),
                ('directions', models.TextField(blank=True, null=True)),
                ('exclude_data_from_site', models.BooleanField(default=False, verbose_name='Exclude all data from this site?')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='riversite_created_by', to=settings.AUTH_USER_MODEL)),
                ('province', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='river_sites', to='shared_models.province')),
                ('river', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='sites', to='shared_models.river')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='riversite_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['river', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sample_type', models.IntegerField(choices=[(1, 'Rotary Screw Trap (RST)'), (2, 'Electrofishing')])),
                ('arrival_date', models.DateTimeField(verbose_name='arrival date/time')),
                ('departure_date', models.DateTimeField(verbose_name='departure date/time')),
                ('samplers', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('season', models.IntegerField(blank=True, null=True)),
                ('crew_probe', models.CharField(blank=True, max_length=255, null=True, verbose_name='crew (probe)')),
                ('crew_seine', models.CharField(blank=True, max_length=255, null=True, verbose_name='crew (seine)')),
                ('crew_dipnet', models.CharField(blank=True, max_length=255, null=True, verbose_name='crew (dipnet)')),
                ('crew_extras', models.CharField(blank=True, max_length=255, null=True, verbose_name='crew (extras)')),
                ('percent_riffle', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='riffle')),
                ('percent_run', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='run')),
                ('percent_flat', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='flat')),
                ('percent_pool', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='pool')),
                ('bank_length_left', models.FloatField(blank=True, null=True, verbose_name='bank length - left (m)')),
                ('bank_length_right', models.FloatField(blank=True, null=True, verbose_name='bank length - right (m)')),
                ('width_lower', models.FloatField(blank=True, null=True, verbose_name='width - lower (m)')),
                ('depth_1_lower', models.IntegerField(blank=True, null=True, verbose_name='depth #1 - lower (cm)')),
                ('depth_2_lower', models.IntegerField(blank=True, null=True, verbose_name='depth #2 - lower (cm)')),
                ('depth_3_lower', models.IntegerField(blank=True, null=True, verbose_name='depth #3 - lower (cm)')),
                ('width_middle', models.FloatField(blank=True, null=True, verbose_name='width - middle (m)')),
                ('depth_1_middle', models.IntegerField(blank=True, null=True, verbose_name='depth #1 - middle (cm)')),
                ('depth_2_middle', models.IntegerField(blank=True, null=True, verbose_name='depth #2 - middle (cm)')),
                ('depth_3_middle', models.IntegerField(blank=True, null=True, verbose_name='depth #3 - middle (cm)')),
                ('width_upper', models.FloatField(blank=True, null=True, verbose_name='width - upper (m)')),
                ('depth_1_upper', models.IntegerField(blank=True, null=True, verbose_name='depth #1 - upper (cm)')),
                ('depth_2_upper', models.IntegerField(blank=True, null=True, verbose_name='depth #2 - upper (cm)')),
                ('depth_3_upper', models.IntegerField(blank=True, null=True, verbose_name='depth #3 - upper (cm)')),
                ('air_temp_arrival', models.FloatField(blank=True, null=True, verbose_name='air temperature on arrival(°C)')),
                ('min_air_temp', models.FloatField(blank=True, null=True, verbose_name='minimum air temperature (°C)')),
                ('max_air_temp', models.FloatField(blank=True, null=True, verbose_name='maximum air temperature (°C)')),
                ('percent_cloud_cover', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='cloud cover (0-1)')),
                ('precipitation_category', models.IntegerField(blank=True, choices=[(1, 'no precipitation'), (2, 'mist'), (3, 'light rain'), (4, 'moderate rain'), (5, 'heavy rain'), (6, 'intermittent'), (7, 'flurries')], null=True)),
                ('precipitation_comment', models.CharField(blank=True, max_length=255, null=True)),
                ('wind_speed', models.IntegerField(blank=True, choices=[(1, 'no wind'), (2, 'calm / slight wind'), (3, 'light wind'), (4, 'moderate wind'), (5, 'heavy wind'), (6, 'variable')], null=True)),
                ('wind_direction', models.IntegerField(blank=True, choices=[(1, 'north'), (2, 'northeast'), (3, 'east'), (4, 'southeast'), (5, 'south'), (6, 'southwest'), (7, 'west'), (8, 'northwest')], null=True)),
                ('water_depth_m', models.FloatField(blank=True, null=True, verbose_name='water depth (m)')),
                ('water_level_delta_m', models.FloatField(blank=True, null=True, verbose_name='water level delta (m)')),
                ('discharge_m3_sec', models.FloatField(blank=True, null=True, verbose_name='discharge (m3/s)')),
                ('water_temp_shore_c', models.FloatField(blank=True, null=True, verbose_name='water temperature at shore (°C)')),
                ('water_temp_trap_c', models.FloatField(blank=True, null=True, verbose_name='water temperature at trap (°C)')),
                ('water_temp_c', models.FloatField(blank=True, help_text='In Celcius, to 1 decimal place', null=True, verbose_name='water temperature (°C)')),
                ('water_cond', models.FloatField(blank=True, help_text='THe measurement is to 1 decimal place in micro siemens (µS)', null=True, verbose_name='Water Conductivity (Specific)')),
                ('overhanging_veg_left', models.IntegerField(blank=True, null=True, verbose_name='Overhanging Vegetation (%) - Left')),
                ('overhanging_veg_right', models.IntegerField(blank=True, null=True, verbose_name='Overhanging Vegetation (%) - Right')),
                ('max_overhanging_veg_left', models.IntegerField(blank=True, null=True, verbose_name='Max Overhanging Vegetation (m) - Left')),
                ('max_overhanging_veg_right', models.IntegerField(blank=True, null=True, verbose_name='Max Overhanging Vegetation (m) - Right')),
                ('percent_fine', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='fine silt or clay')),
                ('percent_sand', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='sand')),
                ('percent_gravel', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='gravel')),
                ('percent_pebble', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='pebble')),
                ('percent_cobble', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='cobble')),
                ('percent_rocks', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='rocks')),
                ('percent_boulder', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='boulder')),
                ('percent_bedrock', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='bedrock')),
                ('rpm_arrival', models.FloatField(blank=True, null=True, verbose_name='RPM at start')),
                ('rpm_departure', models.FloatField(blank=True, null=True, verbose_name='RPM at end')),
                ('operating_condition', models.IntegerField(blank=True, choices=[(1, 'fully operational'), (2, 'partially operational'), (3, 'not operational')], null=True)),
                ('operating_condition_comment', models.CharField(blank=True, max_length=255, null=True)),
                ('electrofisher_voltage', models.FloatField(blank=True, null=True, verbose_name='electrofisher voltage (V)')),
                ('electrofisher_output', models.FloatField(blank=True, null=True, verbose_name='electrofisher output (amps)')),
                ('electrofisher_frequency', models.FloatField(blank=True, null=True, verbose_name='electrofisher frequency (Hz)')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='trapnet_sample_created_by', to=settings.AUTH_USER_MODEL)),
                ('electrofisher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='samples', to='trapnet.electrofisher', verbose_name='electrofisher')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='samples', to='trapnet.riversite')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='trapnet_sample_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-arrival_date'],
            },
        ),
        migrations.CreateModel(
            name='SampleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
                ('code', models.CharField(blank=True, max_length=5, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Sex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('code', models.CharField(blank=True, max_length=5, null=True, unique=True)),
            ],
            options={
                'ordering': ['code'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name (en)')),
                ('nom', models.CharField(blank=True, max_length=255, null=True, verbose_name='name (fr)')),
                ('code', models.CharField(blank=True, max_length=5, null=True, unique=True)),
            ],
            options={
                'ordering': ['code'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sweep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sweep_time', models.IntegerField(blank=True, help_text='in seconds', null=True, verbose_name='sweep time')),
                ('sweep_number', models.FloatField(blank=True, help_text='open sites are always 0.5. Clsoed sites begin at 0.5, but then are depleted starting at 1, and counting up until depletion is achieved (e.g., 2, 3,...)', null=True, verbose_name='sweep number')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='sweep_created_by', to=settings.AUTH_USER_MODEL)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='sweeps', to='trapnet.sample')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='sweep_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('common_name_eng', models.CharField(blank=True, max_length=255, null=True, verbose_name='english name')),
                ('common_name_fre', models.CharField(blank=True, max_length=255, null=True, verbose_name='french name')),
                ('abbrev', models.CharField(max_length=10, unique=True, verbose_name='abbreviation')),
                ('scientific_name', models.CharField(blank=True, max_length=255, null=True)),
                ('code', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('tsn', models.IntegerField(blank=True, null=True, verbose_name='ITIS TSN')),
                ('aphia_id', models.IntegerField(blank=True, null=True, verbose_name='AphiaID')),
                ('notes', models.TextField(blank=True, max_length=255, null=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='trapnet_spp_created_by', to=settings.AUTH_USER_MODEL)),
                ('life_stage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='species', to='trapnet.lifestage')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='trapnet_spp_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'species',
                'ordering': ['common_name_eng'],
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fork_length', models.FloatField(blank=True, null=True, verbose_name='fork length (mm)')),
                ('total_length', models.FloatField(blank=True, null=True, verbose_name='total length (mm)')),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='weight (g)')),
                ('location_tagged', models.CharField(blank=True, max_length=500, null=True)),
                ('tag_number', models.CharField(blank=True, max_length=12, null=True, unique=True, verbose_name='tag number')),
                ('scale_id_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='scale ID number')),
                ('date_tagged', models.DateTimeField(blank=True, null=True, verbose_name='original date tagged')),
                ('tags_removed', models.CharField(blank=True, max_length=250, null=True)),
                ('fish_size', models.IntegerField(blank=True, choices=[(1, 'Fry'), (2, 'Parr')], null=True, verbose_name='fish size')),
                ('age_type', models.IntegerField(blank=True, choices=[(1, 'Fry'), (2, 'Parr')], null=True, verbose_name='age type')),
                ('river_age', models.IntegerField(blank=True, null=True, verbose_name='river age')),
                ('ocean_age', models.IntegerField(blank=True, null=True, verbose_name='ocean age')),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='observation_created_by', to=settings.AUTH_USER_MODEL)),
                ('maturity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='observations', to='trapnet.maturity')),
                ('origin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='observations', to='trapnet.origin')),
                ('sample', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='trapnet.sample')),
                ('sex', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='observations', to='trapnet.sex')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='observations', to='trapnet.species')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='observations', to='trapnet.status')),
                ('sweep', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='trapnet.sweep')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='observation_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['sample__arrival_date', 'species', 'tag_number'],
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('caption', models.CharField(max_length=255)),
                ('image', models.ImageField(upload_to=trapnet.models.file_directory_path)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='file_created_by', to=settings.AUTH_USER_MODEL)),
                ('observation', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='files', to='trapnet.observation')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='file_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['caption'],
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('first_tag', models.CharField(blank=True, max_length=50, null=True)),
                ('last_tag', models.CharField(blank=True, max_length=50, null=True)),
                ('frequency', models.IntegerField(blank=True, null=True, verbose_name='frequency')),
                ('fork_length', models.FloatField(blank=True, null=True, verbose_name='fork length (mm)')),
                ('total_length', models.FloatField(blank=True, null=True, verbose_name='total length (mm)')),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='weight (g)')),
                ('smolt_age', models.IntegerField(blank=True, null=True)),
                ('location_tagged', models.CharField(blank=True, max_length=500, null=True)),
                ('date_tagged', models.DateTimeField(blank=True, null=True, verbose_name='date tagged')),
                ('scale_id_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='scale ID number')),
                ('tags_removed', models.CharField(blank=True, max_length=250, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='entry_created_by', to=settings.AUTH_USER_MODEL)),
                ('origin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='entries', to='trapnet.origin')),
                ('sample', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='trapnet.sample')),
                ('sex', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='entries', to='trapnet.sex')),
                ('species', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='entries', to='trapnet.species')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='entries', to='trapnet.status')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='entry_updated_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'entries',
            },
        ),
    ]
