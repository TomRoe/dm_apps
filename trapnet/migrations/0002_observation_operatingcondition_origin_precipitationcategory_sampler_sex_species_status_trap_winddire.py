# Generated by Django 2.2.2 on 2019-07-12 19:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('shared_models', '0021_auto_20190712_1534'),
        ('trapnet', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='OperatingCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Origin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PrecipitationCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Sampler',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=25, null=True)),
                ('organization', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='Sex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('common_name_eng', models.CharField(blank=True, max_length=255, null=True, verbose_name='english name')),
                ('common_name_fre', models.CharField(blank=True, max_length=255, null=True, verbose_name='french name')),
                ('scientific_name', models.CharField(blank=True, max_length=255, null=True)),
                ('code', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('tsn', models.IntegerField(blank=True, null=True, verbose_name='ITIS TSN')),
                ('aphia_id', models.IntegerField(blank=True, null=True, verbose_name='AphiaID')),
                ('notes', models.TextField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['common_name_eng'],
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WindDirection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='WindSpeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('nom', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Trap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arrival_date', models.DateTimeField(verbose_name='arrival')),
                ('departure_date', models.DateTimeField(blank=True, null=True, verbose_name='departure')),
                ('air_temp_arrival', models.FloatField(blank=True, null=True, verbose_name='Water temperature (°C)')),
                ('max_air_temp', models.FloatField(blank=True, null=True, verbose_name='Water temperature (°C)')),
                ('percent_cloud_cover', models.FloatField(blank=True, null=True, verbose_name='Sand (%)')),
                ('precipitation_comment', models.CharField(blank=True, max_length=255, null=True)),
                ('water_depth_m', models.FloatField(blank=True, null=True, verbose_name='Sand (%)')),
                ('water_level_delta_m', models.FloatField(blank=True, null=True, verbose_name='Sand (%)')),
                ('discharge_m3_sec', models.FloatField(blank=True, null=True, verbose_name='Sand (%)')),
                ('water_temp_shore_c', models.FloatField(blank=True, null=True, verbose_name='Sand (%)')),
                ('water_temp_trap_c', models.FloatField(blank=True, null=True, verbose_name='Sand (%)')),
                ('rpm_arrival', models.FloatField(blank=True, null=True, verbose_name='Sand (%)')),
                ('rpm_departure', models.FloatField(blank=True, null=True, verbose_name='Sand (%)')),
                ('notes', models.TextField(blank=True, null=True)),
                ('season', models.IntegerField(blank=True, null=True)),
                ('last_modified', models.DateTimeField(blank=True, null=True)),
                ('last_modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='wheel_sample_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='last modified by')),
                ('operating_condition', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='traps', to='trapnet.OperatingCondition')),
                ('precipitation_category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='traps', to='trapnet.PrecipitationCategory')),
                ('samplers', models.ManyToManyField(blank=True, to='trapnet.Sampler')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='traps', to='trapnet.RiverSite')),
                ('wind_direction', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='traps', to='trapnet.WindDirection')),
                ('wind_speed', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='traps', to='trapnet.WindSpeed')),
            ],
            options={
                'ordering': ['-arrival_date'],
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_tag', models.CharField(blank=True, max_length=50, null=True)),
                ('last_tag', models.CharField(blank=True, max_length=50, null=True)),
                ('count', models.IntegerField(blank=True, null=True)),
                ('fork_length', models.FloatField(blank=True, null=True)),
                ('total_length', models.FloatField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('smolt_age', models.IntegerField(blank=True, null=True)),
                ('date_tagged', models.DateTimeField(blank=True, null=True, verbose_name='departure')),
                ('scale_id_number', models.CharField(blank=True, max_length=50, null=True)),
                ('tags_removed', models.CharField(blank=True, max_length=250, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('location_tagged', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='smolt_observations', to='shared_models.River')),
                ('origin', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='observations', to='trapnet.Origin')),
                ('sex', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='observations', to='trapnet.Sex')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='observations', to='trapnet.Species')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='observations', to='trapnet.Status')),
                ('trap', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='trapnet.Trap')),
            ],
            options={
                'unique_together': {('trap', 'species')},
            },
        ),
    ]
